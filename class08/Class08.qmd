---
title: "Class 08 Lab"
author: "Renee Zuhars (PID: A17329856)"
format: pdf
toc: TRUE
---
# 1. Exploratory Data Analysis

```{r}
#First, save the input data file into the Project Directory
fna.data <- read.csv("WisconsinCancer.csv")

# Input the data and store as wisc.df
wisc.df <- data.frame(fna.data, row.names=1)

head(wisc.df)
```

```{r}
# Remove the first column (diagnosis) from the data.frame
wisc.data <- wisc.df[,-1]

# View the dataset
head(wisc.data)

# Create diagnosis vector for later 
diagnosis <- factor(wisc.df$diagnosis)
```

### Question 1
> How many observations are in this dataset?

```{r}
nrow(wisc.data)
```
There are 569 observations in this dataset. 

### Question 2
> How many of the observations have a malignant diagnosis?

```{r}
table(diagnosis)
```
There are 212 malignant diagnoses. 

### Question 3
> How many variables/features in the data are suffixed with _mean?

```{r}
sum(grepl("_mean$", names(wisc.data)))
```
There are 10 features that are suffixed with _mean. 

# 2. Principal Component Analysis

```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```
The data does appear to use different units of measurement and to have slightly different variances, so scaling is necessary. 

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale. = TRUE)

summary(wisc.pr)
```

### Question 4
> From your results, what proportion of the original variance is captured by the first principal components (PC1)?

```{r}
# Using wisc.pr:

#find proportion of the original variance
prop_var <- wisc.pr$sdev^2 / sum(wisc.pr$sdev^2)

#find which `prop_var` is represented by PC1 (1)
prop_var[1]

```
The first principal components capture ~44% of the original variance. 

### Question 5
> How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

```{r}
# Using `prop_var` from above:

# find cumulative variance
cum_var <- cumsum(prop_var)

# find the number of PCs required to reach at least 70% variance
which(cum_var >= 0.70)[1]
```
Three principal components are required to describe at least 70% of the data's. 

### Question 6
> How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

```{r}
# find the number of PCs required to reach at least 90% variance
which(cum_var >= 0.90)[1]
```
Seven principal components are required to describe at least 90% of the data's variance. 

Now, I will create a biplot of the `wisc.pr` using the `biplot()` function.

```{r}
biplot(wisc.pr)
```

### Question 7

> What stands out to you about this plot? Is it easy or difficult to understand? Why?

This plot seems unorganized to me. The data is hard to interpret because you cannot read the labels for each plot, and all the labels crowd the data so you can't see the datapoints- making it difficult to understand. The plot also has no units. 

To start fixing this:

```{r}
# Scatter plot observations by components 1 and 2
plot(wisc.pr$x , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```

### Question 8
> Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

For the plots below: I notice that the new plots have slightly less clear separation when comparing them to those created by comparing PC1 vs PC2. The original plots have better separation between the data because they cover more of the variance. 

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, c(1, 3) ], col = diagnosis , 
     xlab = "PC1", ylab = "PC3")
```
The separation between the two groups appears to be less clear in the above graph. This is because PC2 explains more variance than PC3. 

Using ggplot to make it fancier:

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(wisc.pr$x) + 
  aes(PC1, PC2, col= diagnosis ) + 
  labs(x="PC1 (44.27%)", y="PC2 (18.97%)") +
  geom_point()
```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

Calculate the variance explained by each principal component by dividing by the total variance explained by all principal components. Assign this to a variable called pve and create a plot of variance explained for each principal component.

```{r}
# Variance explained by each principal component: pve
pve <- wisc.pr$sdev^2 / sum(wisc.pr$sdev^2)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

*skipped the cran example*

### Question 9
> For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
# Get the component of the loading vector for concave.points_mean (PC1)

loading_concave_points_mean <- wisc.pr$rotation["concave.points_mean", 1]

loading_concave_points_mean
```
The component of the loading vector for `concave.points_mean` is -0.26. 

### Question 10
> What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
which(cum_var >= 0.80)[1]
```
There are 5 principal components required to explain 80% of the data's variance. 

# 3. Hierarchical Clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

# Calculate distances between all pairs in `data.scaled`
data.dist <- dist(data.scaled)

# Use complete linkage to create a hierarchical clustering model. Specify the method argument to `hclust()`, assign results to `wisc.hclust`. 
wisc.hclust <- hclust(data.dist, method = "complete")
```

### Question 11
> Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
# plot the dendrogram of the clustering model
plot(wisc.hclust)

# find where h = x has 4 clusters, done by trial and error
abline(h = 19, col="red", lty=2)
```
The clustering model has 4 clusters when h = 19. 

```{r}
# use cutree to cut the tree down to 4 clusters
wisc.hclust.clusters <- cutree(wisc.hclust, k = 4)

# make a table to compare cluster membership to diagnoses
table(wisc.hclust.clusters, diagnosis)
```
When four clusters were picked, cluster 1 appears to correspond with mostly malignant cells (M = 165, B = 12) and cluster 3 largely corresponds to benign cells (M = 40, B = 343), but not perfectly. 

### Question 12
> Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
# use cutree to cut the tree down to 2 - 10 clusters, done by trial and error
wisc.hclust.clusters <- cutree(wisc.hclust, k = 5)

# make a table to compare cluster membership to diagnoses
table(wisc.hclust.clusters, diagnosis)
```
Based on the options (k = 2-10) I tried, I ended up liking the arrangement when cutting the tree down to 5 clusters. 

In this result, we have a relatively clear separation between beningn and malignant cell populations, like when k = 4. The numbers of benign and malignant cells in clusters 1 and 3 are consistent.  

However, we have the additional benefit of a more clear separation in the other three clusters (2, 4, and 5) with all three containing either only malignant or only benign cells. 

So, I believe k = 5 presents a better diagnoses versus clusters match. 

There are a number of different methods that can be used to combine points during the hierarchical clustering procedure. These include "single", "complete", "average" and (Prof. Grant's favorite) "ward.D2".

### Question 13
> Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
# Trying hierarchical clustering with different methods

# "single"
wisc.hclust.s <- hclust(data.dist, method = "single")

wisc.hclust.s.clusters <- cutree(wisc.hclust.s, k = 5)

table(wisc.hclust.s.clusters, diagnosis)
```

```{r}
# "complete"
wisc.hclust.comp <- hclust(data.dist, method = "complete")

wisc.hclust.comp.clusters <- cutree(wisc.hclust.comp, k = 5)

table(wisc.hclust.comp.clusters, diagnosis)
```

```{r}
# "average"
wisc.hclust.avg <- hclust(data.dist, method = "average")

wisc.hclust.avg.clusters <- cutree(wisc.hclust.avg, k = 5)

table(wisc.hclust.avg.clusters, diagnosis)
```

```{r}
# "ward.D2"
wisc.hclust.ward <- hclust(data.dist, method = "ward.D2")

wisc.hclust.ward.clusters <- cutree(wisc.hclust.ward, k = 5)

table(wisc.hclust.ward.clusters, diagnosis)
```

I decided to use k = 5 for all my comparisons, because it was what I liked most in the original method. I ended up liking "ward.D2" the most, because I believe it displayed a more thorough separation, with potentially another variable clustering them. There are several clusters that have only benign or malignant cells, with larger populations in each of the clusters than the other methods, which I just like more, visually. 

# 4. K-means clustering (skipped)

### Question 14 (skipped)


# 5. Combining Methods

Using the minimum number of principal components required to describe at least 90% of the variability in the data, create a hierarchical clustering model with the linkage method = "ward.D2". (Ward’s criterion is used here because it is based on multidimensional variance like principal components analysis) 

Assign the results to wisc.pr.hclust.

```{r}
# Obtain cumulative proportion
cum_var <- cumsum(pve)

# Find number of PCs needed to reach 90%
num_pcs_90 <- which(cum_var >= 0.90)[1]

# Subset PCA-transformed data to those components
pca_subset <- wisc.pr$x[, 1:num_pcs_90]

# Compute distances using Euclidean metric on PCA scores
pca_dist <- dist(pca_subset)

# Perform hierarchical clustering with Ward’s method
wisc.pr.hclust <- hclust(pca_dist, method = "ward.D2")

#Plot the new subset
plot(wisc.pr.hclust)
```

What do the two main branches of dendrogram (indicating two main clusters) show?  Are the malignant and benign? 

```{r}
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)

table(grps , diagnosis)

plot(wisc.pr$x[,1:2], col=grps)

plot(wisc.pr$x[,1:2], col=diagnosis)
```

There is a color swap here indicating the hclust cluster 1 is mostly “M” and cluster 2 is mostly “B” as we saw from the results of calling table(grps, diagnosis). 

To match things up we can turn our groups into a factor and reorder the levels so cluster 2 comes first and thus gets the first color (black) and cluster 1 gets the second color (red).

```{r}
g <- as.factor(grps)
levels(g)

g <- relevel(g,2)
levels(g)

# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

*I skipped the rest of the fancy stuff...*

### Question 15 
> How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
# Compare to actual diagnoses
grps <- cutree(wisc.pr.hclust, k=2)

table(grps , diagnosis)
```
It separates them relatively well, but not perfectly as it has grouped a small population of benign cells with the larger population of malignant cells, and vice versa.

### Question 16
> How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
# No table created for wisc.km$cluster because that section was labeled "Optional" and I did not complete it. 

# Create table for `wisc.hclust.clusters`
table(wisc.hclust.clusters , diagnosis)
```
According to my classmates (source: Grace), the k-means model did not do well. I think the hierarchical clustering model does a pretty decent job. 

# 6. Sensitivity / Specificity

**Sensitivity**: refers to a test’s ability to correctly detect ill patients who do have the condition. In our example, the sensitivity = the total number of samples in the cluster identified as predominantly malignant (TP) (cancerous) divided by the total number of known malignant samples (TP+FN). In other words: TP/(TP+FN).

**Specificity**: relates to a test’s ability to correctly reject healthy patients without a condition. In our example, specificity is the proportion of benign (not cancerous) samples in the cluster identified as predominantly benign that are known to be benign. In other words: TN/(TN+FN).

### Question 17 (skipped, running out of time)

# 7. Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc

plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

### Question 18
> Which of these new patients should we prioritize for follow up based on your results?

According to the data above, the largely benign cells should be black and the largely malignant cells should be red. Therefore, because we aim to prioritize patients that are more at risk for malignant cells (red), we should prioritize patient 2 because they are located in a cluster of largely malignant cells. 


