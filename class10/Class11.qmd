---
title: "Class 11: AlphaFold"
author: "Renee Zuhars (PID: A17329856)"
format: pdf
toc: TRUE
---
# Using AlphaFold

Here we read the results from AlphaFold and try to interpret all of the models and quality score metrics:

```{r}
library(bio3d)

pth <- "dimer_23119/"
pdb.files <- list.files(path = pth, full.names = TRUE, pattern = ".pdb")
```

Align and superimpose all these models:

```{r}
file.exists(pdb.files)

```

```{r}
pdbs <- pdbaln(pdb.files, fit = TRUE, exefile = "msa")
```

RMSD is a standard measure of structural distance between coordinate sets. We can use the rmsd() function to calculate the RMSD between all pairs models.

```{r}
rd <- rmsd(pdbs, fit=T)
range(rd)
```

## Plots

### Heatmap

Draw a heatmap of these RMSD matrix values.

```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

### pLDDT values

Now, let's plot the pLDDT values across all models. Recall that this information is in the B-factor column of each model and that this is stored in our aligned pdbs object as pdbs$b with a row per structure/model.

```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```

```{r}
plot(pdbs$b[1,],typ="l", ylim=c(0,100))
lines(pdbs$b[2,],typ="l", col="navy")
lines(pdbs$b[3,],typ="l", col="chartreuse")
lines(pdbs$b[4,],typ="l", col="orange")
lines(pdbs$b[5,],typ="l", col="red")
```

We can improve the superposition/fitting of our models by finding the most consistent “rigid core” common across all the models. For this we will use the core.find() function:

```{r}
core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

### RMSF

Now we can examine the RMSF between positions of the structure. RMSF is an often used measure of conformational variance along the structure:


```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

### Predicted Alignment Error for domains

Independent of the 3D structure, AlphaFold produces an output called Predicted Aligned Error (PAE). This is detailed in the JSON format result files, one for each model structure.

```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=pth,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

Let's read the first and fifth files:

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae2 <- read_json(pae_files[2],simplifyVector = TRUE)
pae3 <- read_json(pae_files[3],simplifyVector = TRUE)
pae4 <- read_json(pae_files[4],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
attributes(pae5)

# Per-residue pLDDT scores are the same as B-factor of PDB..
head(pae1$plddt) 
head(pae5$plddt)
```

When ranking models, the maximum PAE values are the most useful. A lower score indicates a better model. 

```{r}
pae1$max_pae
pae2$max_pae
pae3$max_pae
pae4$max_pae
pae5$max_pae
```

Here, we can see that model 1 is much better than model 5, and that model 5 is much worse than all the other models. Model 3 appears to be the best. 

We can plot the N by N (where N is the number of residues) PAE scores with ggplot or with functions from the Bio3D package:

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))

plot.dmat(pae3$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))

plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

### Residue conservation from alignment file

```{r}
aln_file <- list.files(path=pth,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file

aln <- read.fasta(aln_file[1], to.upper = TRUE)

dim(aln$ali) #How many sequences are in this alignment

```

```{r}
# We can score residue conservation in the alignment with the conserv() function.
sim <- conserv(aln)

plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```

The conserved positions will stand out more if we generate a consensus sequence with a high cutoff value:

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

For a final visualization of these functionally important sites we can map this conservation score to the Occupancy column of a PDB file for viewing in molecular viewer programs such as Mol*, PyMol, VMD, chimera etc.

```{r}
m1.pdb <- read.pdb(pdb.files[1])
occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")
```







