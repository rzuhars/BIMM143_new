---
title: "Class 14: RNA-seq analysis mini-project"
author: "Renee Zuhars (PID: A17329856)"
format: pdf
toc: TRUE
---

# Background

The data for for hands-on session comes from GEO entry: GSE37704, which is associated with the following publication:

Trapnell C, Hendrickson DG, Sauvageau M, Goff L et al. "Differential analysis of gene regulation at transcript resolution with RNA-seq". Nat Biotechnol 2013 Jan;31(1):46-53. PMID: 23222703
The authors report on differential analysis of lung fibroblasts in response to loss of the developmental transcription factor HOXA1. Their results and others indicate that HOXA1 is required for lung fibroblast and HeLa cell cycle progression. In particular their analysis show that "loss of HOXA1 results in significant expression level changes in thousands of individual transcripts, along with isoform switching events in key regulators of the cell cycle". For our session we have used their Sailfish gene-level estimated counts and hence are restricted to protein-coding genes only.


# Data Input

First we will download all the packages we need:

```{r, message=FALSE}
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(pathview)
library(gage)
library(gageData)
```

The .csv files corresponding to today's data were also moved into this project directory, they are "GSE37704_featurecounts.csv" and "GSE37704_metadata.csv". 

```{r}
colData <- read.csv("GSE37704_metadata.csv", row.names = 1)
countData <- read.csv("GSE37704_featurecounts.csv", row.names = 1)

head(colData)

head(countData)
```


# Check correspondance

Check the correspondance of colData rows and countData columns.

```{r}
rownames(colData)
```

```{r}
colnames(countData)
```

```{r}
counts <- countData[,-1]
```


```{r}
all( rownames(colData) == colnames(counts) )
```


# Remove zero count genes

We will have rows in `counts` for genes that we cannot say anything about because they have zero expression in the particular tissue we are looking at. 

```{r}
head(counts)
```

If the `rowSums()` is zero, then a given gene (i.e. row) has no count data. We should exclude these genes from further consideration. 

```{r}
to.keep <- rowSums(counts) != 0
cleancounts <- counts[to.keep,]
```

> Q. How many genes do we have left?

```{r}
nrow(cleancounts)
```

We have 15,975 genes left. 


# Setup DESeq object for analysis

```{r}
dds <- DESeqDataSetFromMatrix(countData = cleancounts,
                              colData = colData,
                              design = ~condition)
```


# Run DESeq analysis

```{r}
dds <- DESeq(dds)
```


# Extract the results

```{r}
res <- results(dds)
head(res)
```


# Add Gene annotation

```{r, message = FALSE}
columns(org.Hs.eg.db)

res$symbol <- mapIds(x = org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL",
                     multiVals = "first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys = rownames(res),
                    keytype = "ENSEMBL",
                    column = "ENTREZID",
                    multiVals = "first")

res$name =   mapIds(org.Hs.eg.db,
                    keys = rownames(res),
                    keytype = "ENSEMBL" ,
                    column = "GENENAME",
                    multiVals = "first")

head(res, 10)
```


# Save my results to a CSV file

```{r}
res = res[order(res$pvalue),]

write.csv(res, file="class14results.csv")
```


# Result visualization

```{r}
mycols <- rep("azure3", nrow(res))
mycols[ res$log2FoldChange <= -2 ] <- "goldenrod1"
mycols[ res$log2FoldChange >= 2 ] <- "goldenrod1"

mycols[ res$padj >= 0.05 ] <-"azure3"

#mycols
plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=-2, col="violetred1")
abline(v=+2, col="violetred1")
abline(h=-log(0.05), col="violetred1")
```


```{r}
library(ggplot2)

ggplot(res) +
  aes(log2FoldChange, -log(padj)) +
  geom_point()

```

# Pathway analysis

```{r}
data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

Note that we used the mapIDs() function above to obtain Entrez gene IDs (stored in `res$entrez`) and we have the fold change results from DESeq2 analysis (stored in `res$log2FoldChange`).

```{r}
# name a new vector for fold changes
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)

```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)

# Look at the object returned from gage
attributes(keggres)

# Look at the first few down (less) pathways
head(keggres$less)
```

Each `keggres$less` and `keggres$greater` object is a data matrix with gene sets as rows sorted by p-value.

Now we can make a pathway plot with our results shown in color.

```{r}
# Making a pathway plot from the first down (less) pathway id we could see above

pathview(gene.data=foldchanges, pathway.id="hsa04110") 

```
The output can be seen here:

![Pathway plot for the "less" pathway "hsa04110"](hsa04110.pathview.png)

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

Now, let's process our results a bit more to automatically pull out the top 5 upregulated pathways, then further process that just to get the pathway IDs needed by the `pathview()` function. We'll use these KEGG pathway IDs for pathview plotting below.

```{r}
# Focus on top 5 upregulated pathways 
keggrespathways_up <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids_up = substr(keggrespathways_up, start=1, stop=8)
keggresids_up

# Draw plots for the top five pathways
pathview(gene.data=foldchanges, pathway.id=keggresids_up, species="hsa")
```

![1/5 Pathway plots for the top 5 upregulated pathways: "hsa04640"](hsa04640.pathview.png)
![2/5 Pathway plots for the top 5 upregulated pathways: "hsa04630"](hsa04630.pathview.png)
![3/5 Pathway plots for the top 5 upregulated pathways: "hsa00140"](hsa00140.pathview.png)
![4/5 Pathway plots for the top 5 upregulated pathways: "hsa04142"](hsa04142.pathview.png)
![5/5 Pathway plots for the top 5 upregulated pathways: "hsa04330"](hsa04330.pathview.png)


We can do the same thing for the top 5 downregulated pathways.

```{r}
# Focus on top 5 upregulated pathways 
keggrespathways_down <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids_down = substr(keggrespathways_down, start=1, stop=8)
keggresids_down

# Draw plots for the top five pathways
pathview(gene.data=foldchanges, pathway.id=keggresids_down, species="hsa")
```

![1/5 Pathway plots for the top 5 downregulated pathways: "hsa04110"](hsa04110.pathview.png)
![2/5 Pathway plots for the top 5 downregulated pathways: "hsa03030"](hsa03030.pathview.png)
![3/5 Pathway plots for the top 5 downregulated pathways: "hsa03013"](hsa03013.pathview.png)
![4/5 Pathway plots for the top 5 downregulated pathways: "hsa03440"](hsa03440.pathview.png)

![5/5 Pathway plots for the top 5 downregulated pathways: "hsa04114"](hsa04114.pathview.png)


# Gene Ontology

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies. Let’s focus on BP (a.k.a Biological Process) here.

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```


# Reactome analysis

We need to make a little file of our significant genes that we can upload to the reactome webpage:

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))

write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

Then, to perform pathway analysis online go to the Reactome website (https://reactome.org/PathwayBrowser/#TOOL=AT). Select “choose file” to upload your significant gene list. Then, select the parameters “Project to Humans”, then click “Analyze”.

![](R-HSA-69278.png)
