---
title: "Class 13- Transcriptomics and the analysis of RNA-Seq data"
author: "Renee Zuhars (PID: A17329856)"
format: pdf
toc: TRUE
---

# Background

Today we will analyze some RNA sequencing data on the effects of a common steroid drug on airway cell lines. 

There are two main inputs we need for this analysis: 

- `countData`: counts for genes in rows with experiments in the columns
- `colData`: or metadata, tells us about the design of the experiment (i.e. what is in the columns of countData)

# Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)

metadata <- read.csv("airway_metadata.csv")

```

> Q1. How many genes are in this dataset? 

```{r}
head(counts)

nrow(counts)
```
There are 38,694 genes in this dataset. 


> Q2. How many 'control' cell lines do we have? 

option 1: 
```{r}
metadata$dex
table(metadata$dex)
```

option 2: 
```{r}
sum(metadata$dex == "control")
```

We have 4 control cell lines. 


# Toy differential gene expression

Let's try finding the average or mean of the "control" and "treated" columns and see if they differ. 

- 1. First we need to find all "control" columns
- 2. Extract just the "control" values for each gene
- 3. Calculate the `mean()` for each gene "control" value

```{r}
all( colnames(counts) == metadata$id )
```

The $dex column tells me whether we have "control" or "treated"
```{r}
control.inds <- metadata$dex == "control"
```

Extract just the "control" values for all genes
```{r}
control.counts <- counts[,control.inds]
```

Calculate the mean value for each gene in these "control" columns
```{r}
control.mean <- rowMeans(control.counts)
```

> Q3. Do the same for "treated" to get a `treated.mean`

```{r}
treated.inds <- metadata$dex == "treated"

treated.counts <- counts[,treated.inds]

treated.mean <- rowMeans(treated.counts)
```

> Q4. Make a plot of `control.mean` vs `treated.mean`

Let's store our mean values together in a data.frame for easier book-keeping:
```{r}
meancounts <- data.frame(control.mean, treated.mean)

plot(meancounts) #plot with base R

library(ggplot2)

ggplot(meancounts) + # using ggplot
  aes(x=control.mean, y=treated.mean) +
  geom_point(alpha=0.3)
```

We need to log transform this data as it is so heavily skewed!

```{r}
plot(meancounts, log="xy")
```

```{r}
ggplot(meancounts) + 
  aes(x=control.mean, y=treated.mean) +
  geom_point(alpha=0.3) +
  scale_x_log10() +
  scale_y_log10()
```

A common "rule-of-thumb" is to focus on genes with a log2 "fold-change" of +2 as so called UP REGULATED and -2 as DOWN REGULATED

```{r}
log2(80/20)
```
This means there is 4x more of the gene present. 

Let's add a log2 fold-change value to our `meancounts` data.frame

```{r}
meancounts$log2fc <-
  log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```

>Q5. Remove any "zero count" genes from our dataset for further analysis.

```{r}
to.keep <- rowSums( meancounts[,1:2] == 0 ) == 0
sum(to.keep)
```

```{r}
mycounts <- meancounts[to.keep,]
head(mycounts)
```

>Q6. How many genes are "up" regulated at a log2fc threshold of +2?

```{r}
sum( mycounts$log2fc >= 2 )
```
314 genes out of 21,817 genes are "up" regulated. 

>Q7. How many genes are "down" regulated at a log2fc threshold of -2?

```{r}
sum( mycounts$log2fc <= -2 )
```
485 genes out of 21,817 genes are "down" regulated. 

*we are missing some statistics- we need a p-value. 

# DESeq2 analysis

Let's do this properly and consider the stats.

We will use DESeq2 to do this:

```{r, message=FALSE}
library(DESeq2)
```

The first function we will use from this package sets up the input in the particular format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                              colData = metadata,
                              design = ~dex)
```

We can now run our DESeq analysis

```{r}
dds <- DESeq(dds)
res <- results(dds)
```

Peek at results:
```{r}
head(res)
```

padj (adjusted p value)- is a multiple testing correction metric

# Result figure: Volcano Plot

Plot of the Log2FC versus the p-value (the adjusted p value).

```{r}
plot(res$log2FoldChange, res$padj)
```

This P-value data is again heavily skewed- so let's log transform it:

```{r}
plot(res$log2FoldChange, log(res$padj))
```

We can flip the y-axis by adding a minus sign. This will make it easier to interpret:

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=-2, col="coral1")
abline(v=+2, col="coral1")
abline(h=-log(0.05), col="deeppink")
```

Let's add some (more) color. 

```{r}
mycols <- rep("azure3", nrow(res))
mycols[ res$log2FoldChange <= -2 ] <- "goldenrod1"
mycols[ res$log2FoldChange >= 2 ] <- "goldenrod1"

mycols[ res$padj >= 0.05 ] <-"azure3"

#mycols
plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=-2, col="violetred1")
abline(v=+2, col="violetred1")
abline(h=-log(0.05), col="violetred1")

```

> Q8. Make a ggplot volcano plot with colors and lines as annotation along with nice axis labels. 

```{r}
ggplot(as.data.frame(res)) +
  aes(res$log2FoldChange, -log(res$padj)) +
  geom_point(col=mycols) +
  geom_vline(xintercept= c(-2, +2), col="violetred1") +
  geom_hline(yintercept = -log(0.05), col="violetred1") +
  labs(x = "log2 Fold Change", y = "-log(Adjusted p values)", title = "Log2FC vs. Adjusted P Value") +
  theme_bw()

```

## Pathway Analysis

We first need to add gene symbols (e.g. HBB, etc) so we know what genes we are dealing with. We need to "translate" between ENSEMBL ids that we 

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)
```

What different database ID types I can translate between:

```{r}
columns(org.Hs.eg.db)
```

Let's "map" between "ENSEMBL" and "SYMBOL" (i.e. gene symbol)

```{r}
res$symbol <- mapIds(x = org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "SYMBOL")

head(res)
```

Add a few more mappings: 
Between "ENSEMBL" and "GENENAME"
Between "ENSEMBL" and "ENTREZID"

```{r}
res$name <- mapIds(x = org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "GENENAME")

res$entrez <- mapIds(x = org.Hs.eg.db, 
                     keys = rownames(res),
                     keytype = "ENSEMBL",
                     column = "ENTREZID")

head(res)
```

Be sure to save our annotated results to a file.

```{r}
write.csv(res, file = "my_annotated_results_class13.csv")
```


# Pathway Analysis

Installed packages (using BiocManager::install(c("pathview", "gage", "gageData")))

```{r, message=FALSE}
library(pathview)
library(gage)
library(gageData)
```

Let's peek at the metabolism of caffeine.

```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

To run pathway analysis, we will use the `gage()` function, and it requires a wee "vector of importance". We will use our LogFC results from our `res` object. 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)

# What is in the returned `keggres` object:
attributes(keggres)

head(keggres$less, 3) #pathways that have an overlap with my gene
```

We can pass our foldchanges vector (our results) together with any of these highlighted pathway IDs to see how our genes overlap the pathway. 

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![The Asthma pathway overlaps with our differentially expressed genes](hsa05310.pathview.png)






